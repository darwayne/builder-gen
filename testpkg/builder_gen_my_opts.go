// Code generated by builder-gen. DO NOT EDIT.
package testpkg

import (
	"io"
	"time"
)

func (o MyOpts) HasMultiArray() bool {
	return o.MultiArray != nil
}

func (o MyOpts) ToOptFuncs() []MyOptsFunc {
	builder := NewMyOptsBuilder()

	if o.HasMultiArray() {
		builder.MultiArray(o.MultiArray...)
	}

	builder.Interesting(*o.Interesting)
	builder.Yo(o.Yo)
	builder.Total(o.Total)
	builder.Duration(o.Duration)
	builder.Complex(*o.Complex)
	builder.Hmm(o.Hmm)
	builder.SimpleChan(o.SimpleChan)
	builder.ReceiveOnlyChan(o.ReceiveOnlyChan)
	builder.ComplexChan(o.ComplexChan)
	builder.Map(o.Map)
	builder.FixedSizeArray(o.FixedSizeArray)

	return builder.Build()
}

type MyOptsFunc func(*MyOpts)
type MyOptsBuilder struct {
	opts []MyOptsFunc
}

func NewMyOptsBuilder(opts ...MyOptsFunc) *MyOptsBuilder {
	builder := &MyOptsBuilder{opts: opts}
	return builder
}

func (l *MyOptsBuilder) Interesting(interestingParam bool) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Interesting = &interestingParam
	})
}
func (l *MyOptsBuilder) Yo(yoParam string) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Yo = yoParam
	})
}
func (l *MyOptsBuilder) Total(totalParam int) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Total = totalParam
	})
}
func (l *MyOptsBuilder) Duration(durationParam time.Duration) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Duration = durationParam
	})
}
func (l *MyOptsBuilder) Complex(complexParam func(string) func(reader io.Reader) time.Duration) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Complex = &complexParam
	})
}
func (l *MyOptsBuilder) Hmm(hmmParam io.Reader) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Hmm = hmmParam
	})
}
func (l *MyOptsBuilder) SimpleChan(simpleChanParam chan struct{}) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.SimpleChan = simpleChanParam
	})
}
func (l *MyOptsBuilder) ReceiveOnlyChan(receiveOnlyChanParam <-chan string) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.ReceiveOnlyChan = receiveOnlyChanParam
	})
}
func (l *MyOptsBuilder) ComplexChan(complexChanParam chan func(string) io.Reader) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.ComplexChan = complexChanParam
	})
}
func (l *MyOptsBuilder) Map(mapParam map[string]string) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Map = mapParam
	})
}
func (l *MyOptsBuilder) MultiArray(multiArrayParam ...[]string) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.MultiArray = multiArrayParam
	})
}
func (l *MyOptsBuilder) FixedSizeArray(fixedSizeArrayParam [3]string) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.FixedSizeArray = fixedSizeArrayParam
	})
}

func (l *MyOptsBuilder) add(fn MyOptsFunc) *MyOptsBuilder {
	l.opts = append(l.opts, fn)
	return l
}

func (l *MyOptsBuilder) Build() []MyOptsFunc {
	return l.opts
}

func ToMyOpts(opts ...MyOptsFunc) MyOpts {
	var info MyOpts
	ToMyOptsWithDefault(&info, opts...)

	return info
}

func ToMyOptsWithDefault(info *MyOpts, opts ...MyOptsFunc) {
	for _, o := range opts {
		o(info)
	}
}
