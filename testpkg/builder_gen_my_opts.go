// Code generated by builder-gen. DO NOT EDIT.
package testpkg

func (o MyOpts) HasInteresting() bool {
	return o.Interesting != nil
}

func (o MyOpts) ToOptFuncs() []MyOptsFunc {
	builder := NewMyOptsBuilder()

	if o.HasInteresting() {
		builder.Interesting(*o.Interesting)
	}

	builder.Yo(o.Yo)
	builder.Total(o.Total)

	return builder.Build()
}

type MyOptsFunc func(*MyOpts)
type MyOptsBuilder struct {
	opts []MyOptsFunc
}

func NewMyOptsBuilder(opts ...MyOptsFunc) *MyOptsBuilder {
	builder := &MyOptsBuilder{opts: opts}
	return builder
}

func (l *MyOptsBuilder) Interesting(interesting bool) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Interesting = &interesting
	})
}
func (l *MyOptsBuilder) Yo(yo string) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Yo = yo
	})
}
func (l *MyOptsBuilder) Total(total int) *MyOptsBuilder {
	return l.add(func(opts *MyOpts) {
		opts.Total = total
	})
}

func (l *MyOptsBuilder) add(fn MyOptsFunc) *MyOptsBuilder {
	l.opts = append(l.opts, fn)
	return l
}

func (l *MyOptsBuilder) Build() []MyOptsFunc {
	return l.opts
}

func ToMyOpts(opts ...MyOptsFunc) MyOpts {
	var info MyOpts
	ToMyOptsWithDefault(&info, opts...)

	return info
}

func ToMyOptsWithDefault(info *MyOpts, opts ...MyOptsFunc) {
	for _, o := range opts {
		o(info)
	}
}
