// Code generated by builder-gen. DO NOT EDIT.
package testpkg



func (o YoSon) HasCool() bool {
	return o.Cool != nil
}

func (o YoSon) HasHmm() bool {
	return o.Hmm != nil
}


func (o YoSon) ToOptFuncs() []YoSonFunc {
	builder := NewYoSonBuilder()

	if o.HasCool() {
		builder.Cool(*o.Cool)
	}

	if o.HasHmm() {
		builder.Hmm(o.Hmm...)
	}


	return builder.Build()
}

type YoSonFunc func(*YoSon)
type YoSonBuilder struct {
	opts  []YoSonFunc
}

func NewYoSonBuilder(opts ...YoSonFunc) *YoSonBuilder {
	builder := &YoSonBuilder{opts: opts}
	return builder
}


func (l *YoSonBuilder) Cool(cool string) *YoSonBuilder {
	return l.add(func(opts *YoSon) {
		opts.Cool = &cool
	})
}

func (l *YoSonBuilder) Hmm(hmm ...string) *YoSonBuilder {
	return l.add(func(opts *YoSon) {
		opts.Hmm = hmm
	})
}


func (l *YoSonBuilder) add(fn YoSonFunc) *YoSonBuilder {
	l.opts = append(l.opts, fn)
	return l
}

func (l *YoSonBuilder) Build() []YoSonFunc {
	return l.opts
}

func ToYoSon(opts ...YoSonFunc) YoSon {
	var info YoSon
	ToYoSonWithDefault(&info, opts...)

	return info
}

func ToYoSonWithDefault(info *YoSon, opts ...YoSonFunc) {
	for _, o := range opts {
		o(info)
	}
}
