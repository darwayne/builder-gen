package generator

const tmpl = `{{.BuildTags}}// Code generated by builder-gen. DO NOT EDIT.
package {{.Package}}
{{.Imports}}

{{range .BuilderFields}}
func (o {{$.Type}}) Has{{.FieldName}}() bool {
	return o.{{.FieldName}} != nil
}
{{end}}

func (o {{$.Type}}) ToOptFuncs() []{{$.Type}}Func {
	builder := New{{$.Type}}Builder()
{{range .BuilderFields}}
	if o.Has{{.FieldName}}() {
		builder.{{.FuncName}}({{.Star}}o.{{.FieldName}}{{.FieldParamPrefix}})
	}
{{end}}

	return builder.Build()
}

type {{$.Type}}Func func(*{{$.Type}})
type {{$.Type}}Builder struct {
	opts  []{{$.Type}}Func
}

func New{{$.Type}}Builder(opts ...{{$.Type}}Func) *{{$.Type}}Builder {
	builder := &{{$.Type}}Builder{opts: opts}
	return builder
}

{{range .BuilderFields}}
func (l *{{$.Type}}Builder) {{.FuncName}}({{.ParamName}} {{.ParamType}}) *{{$.Type}}Builder {
	return l.add(func(opts *{{$.Type}}) {
		opts.{{.FieldName}} = {{.Point}}{{.ParamName}}
	})
}
{{end}}

func (l *{{$.Type}}Builder) add(fn {{$.Type}}Func) *{{$.Type}}Builder {
	l.opts = append(l.opts, fn)
	return l
}

func (l *{{$.Type}}Builder) Build() []{{$.Type}}Func {
	return l.opts
}

func To{{$.Type}}(opts ...{{$.Type}}Func) {{$.Type}} {
	var info {{$.Type}}
	To{{$.Type}}WithDefault(&info, opts...)

	return info
}

func To{{$.Type}}WithDefault(info *{{$.Type}}, opts ...{{$.Type}}Func) {
	for _, o := range opts {
		o(info)
	}
}
`
